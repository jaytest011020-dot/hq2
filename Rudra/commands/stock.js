const axios = require("axios");
const { setData, getData } = require("../../database.js");

module.exports.config = {
  name: "stock",
  version: "6.5.0",
  hasPermssion: 0,
  credits: "Jaylord La Pe√±a + ChatGPT",
  description: "GrowAGarden auto-stock with full seeds, eggs, gear, cosmetics + emoji",
  usePrefix: true,
  commandCategory: "gag tools",
  usages: "/stock on|off|check",
  cooldowns: 10,
};

// Auto-stock timers per GC
const autoStockTimers = {};

// Special items alert
const SPECIAL_ITEMS = [
  "Grandmaster Sprinkler",
  "Master Sprinkler",
  "Level-up Lollipop",
  "Medium Treat",
  "Medium Toy"
];

// Emoji mapping for seeds, eggs, gear, cosmetics
const ITEM_EMOJI = {
  // Seeds
  "Carrot": "ü•ï",
  "Strawberry": "üçì",
  "Blueberry": "ü´ê",
  "Orange Tulip": "üå∑",
  "Tomato": "üçÖ",
  "Corn": "üåΩ",
  "Daffodil": "üåº",
  "Watermelon": "üçâ",
  "Pumpkin": "üéÉ",
  "Apple": "üçé",
  "Bamboo": "üéç",
  "Coconut": "ü••",
  "Cactus": "üåµ",
  "Dragon Fruit": "üêâ",
  "Mango": "ü•≠",
  "Grape": "üçá",
  "Mushroom": "üçÑ",
  "Pepper": "üå∂Ô∏è",
  "Beanstalk": "ü™¥",
  "Ember Lily": "üî•üå∏",
  "Sugar Apple": "üçè",
  "Burning Bud": "üî•üå±",
  "Giant Pinecone": "üå≤",
  "Elder Strawberry": "üçì‚ú®",
  "Romanesco": "ü•¶",
  "Potato": "ü•î",
  "Brussels Sprouts": "ü•¨",
  "Cocomango": "ü•≠ü••",
  "Broccoli": "ü•¶",
  // Eggs
  "Common Egg": "ü•ö",
  "Uncommon Egg": "ü•ö‚ú®",
  "Rare Egg": "ü•öüíé",
  "Legendary Egg": "ü•öüåü",
  "Mythical Egg": "ü•öüî•",
  "Bug Egg": "üêõü•ö",
  // Gear
  "Watering Can": "üíß",
  "Trowel": "üî®",
  "Trading Ticket": "üéüÔ∏è",
  "Recall Wrench": "üîß",
  "Basic Sprinkler": "üåä",
  "Advanced Sprinkler": "üí¶",
  "Firework": "üéÜ",
  "Medium Treat": "üç™",
  "Medium Toy": "üß∏",
  "Night Staff": "üåô",
  "Star Caller": "‚≠ê",
  "Garden Guide": "üìñ",
  "Godly Sprinkler": "üå™Ô∏è",
  "Chocolate Sprinkler": "üç´",
  "Magnifying Glass": "üîç",
  "Nectar Staff": "üçØ",
  "Pollen Radar": "üì°",
  "Master Sprinkler": "üåüüí¶",
  "Cleaning Spray": "üß¥",
  "Favorite Tool": "üõ†Ô∏è",
  "Harvest Tool": "üåæ",
  "Friendship Pot": "ü§ù",
  "Honey Sprinkler": "üçØüí¶",
  "Pet Mutation Shard Tranquil": "üåÄ",
  "Pet Mutation Shard Corrupted": "‚ò†Ô∏è",
  "Silver Fertilizer": "‚ö™",
  "Level Up Lollipop": "üç≠",
  "Grandmaster Sprinkler": "üåäüî•",
  "Rainbow Lollipop": "üåàüç≠",
  "Lightning Rod": "‚ö°",
  "Tanning Mirror": "ü™û",
  "Reclaimer": "‚ôªÔ∏è",
  "Small Toy": "üß∏",
  "Pet Mutation Shard Giantbean": "üå±üü¢",
  "Small Treat": "üç™",
  "MutationSprayVerdant": "üåø",
  "Spray mutation disco": "üíÉ",
  "MutationSprayWet": "üíß",
  "MutationSprayWindstuck": "üçÉ",
  "Mutation Spray Choc": "üç´",
  "Mutation Spray Pollinated": "üêù",
  "Mutation Spray Shocked": "‚ö°",
  "Mutationspraycloudtouched": "‚òÅÔ∏è",
  "Mutationsprayburnt": "üî•",
  "Mutationspraychilled": "‚ùÑÔ∏è",
  "MutationSprayAmber": "üü†",
  "TranquilMutationSpray": "üåÄ",
  "CorruptMutationSpray": "‚ò†Ô∏è",
  "Mutation Spray HoneyGlazed": "üçØ",
  "Mutation Spray Fried": "üçü",
  "CookedMutationSpray": "üç≥",
  "Mutation Spray Bloom": "üå∏",
  "Mutation Spray Glimmering": "‚ú®",
  "Mutation Spray Luminous": "üí°",
  // Cosmetics (examples, full list can be expanded)
  "Statue Crate": "üóø",
  "Classic Gnome Crate": "üë®‚Äçüåæ",
  "Fun Crate": "üé™",
  "Common Gnome Crate": "üßô",
  "Sign Crate": "üìú",
  "Red tractor": "üöú",
  "Green tractor": "üöú",
  "Brown Well": "ü™£",
  "Blue Well": "ü™£",
  "Red Well": "ü™£",
  "Frog Fountain": "üê∏",
  "Ring Walkway": "‚≠ï",
  "Viney Ring Walkway": "üåø‚≠ï",
  "Round Metal Arbour": "üõñ",
  "Large Wood Arbour": "üè°",
  "Log Bench": "ü™ë",
  "White Bench": "ü™ë",
  "Brown Bench": "ü™ë",
  "Wood Fence": "ü™µ",
  "Small Stone Pad": "ü™®",
  "Medium Stone Table": "ü™®",
  "Stone Lantern": "üèÆ",
  "Axe Stump": "ü™ì",
  "Bookshelf": "üìö",
  "Mini TV": "üì∫",
  "Hay Bale": "üåæ",
  "Water Trough": "üíß",
  "Shovel Grave": "‚õèÔ∏è",
  "Torch": "üî•",
  "Small Path Tile": "üü´",
  "Medium Path Tile": "üü´",
  "Large Path Tile": "üü´",
  "Orange Umbrella": "üü†‚òÇÔ∏è",
  "Yellow Umbrella": "üü°‚òÇÔ∏è",
  "Red Pottery": "üü•",
  "White Pottery": "‚¨ú",
  "Brick Stack": "üß±",
  "Shovel": "‚õèÔ∏è",
  "Rock Pile": "ü™®",
  "Rake": "üßπ",
  "Compost Bin": "üóëÔ∏è",
  "Torch": "üî•"
}; 
// Convert text to bold Unicode letters
function toBoldUnicode(str) {
  const boldOffset = 0x1D400 - 65;
  return str.split("").map(c => {
    const code = c.charCodeAt(0);
    if (code >= 65 && code <= 90) return String.fromCodePoint(code + boldOffset);
    if (code >= 97 && code <= 122) return String.fromCodePoint(code + boldOffset + 32);
    return c;
  }).join("");
}

// Fetch stock data from API
async function fetchGardenData() {
  try {
    const res = await axios.get("https://gagstock.gleeze.com/grow-a-garden");
    return res.data?.data || {};
  } catch (e) {
    return null;
  }
}

// Format items with emoji and bold name
function formatSection(title, items) {
  if (!items || items.length === 0) return "‚ùå None";
  return items.map(i => {
    const emoji = ITEM_EMOJI[i.name] || "";
    return `‚Ä¢ ${emoji} ${toBoldUnicode(i.name)} (${i.quantity})`;
  }).join("\n");
}

// Get next 5-minute aligned restock
function getNext5Min(date = null) {
  const now = date || new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Manila" }));
  let minutes = now.getMinutes();
  let nextMinutes = Math.floor(minutes / 5) * 5 + 1;
  if (nextMinutes <= minutes) nextMinutes += 5;

  const next = new Date(now);
  next.setMinutes(nextMinutes);
  next.setSeconds(0, 0);

  if (nextMinutes >= 60) {
    next.setHours(now.getHours() + 1);
    next.setMinutes(nextMinutes % 60);
  }
  return next;
}

// Send stock update to GC
async function sendStock(threadID, api) {
  const data = await fetchGardenData();
  if (!data) return;

  const now = new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Manila" }));
  const next = getNext5Min();

  const eggs = formatSection("Eggs", data.egg?.items);
  const seeds = formatSection("Seeds", data.seed?.items);
  const gear = formatSection("Gear", data.gear?.items);
  const cosmetics = formatSection("Cosmetics", data.cosmetics?.items);

  const stockMsg = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
üå± ùóîùòÇùòÅùóº-ùó¶ùòÅùóºùó∞ùó∏ ùó®ùóΩùó±ùóÆùòÅùó≤ üå±
üïí ${now.toLocaleTimeString("en-PH", { hour12: false })}
üîÑ Next Restock: ${next.toLocaleTimeString("en-PH", { hour12: false })}
üí† Auto-stock active
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄüõ†Ô∏è ùóöùó≤ùóÆùóø‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
${gear}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄü•ö ùóòùó¥ùó¥ùòÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
${eggs}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄüíÑ ùóñùóºùòÄùó∫ùó≤ùòÅùó∂ùó∞ùòÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
${cosmetics}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄüå± ùó¶ùó≤ùó≤ùó±ùòÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
${seeds}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
`.trim();

  api.sendMessage(stockMsg, threadID);

  // Special items alert
  const allItems = [
    ...(data.egg?.items || []),
    ...(data.seed?.items || []),
    ...(data.gear?.items || []),
    ...(data.cosmetics?.items || [])
  ];

  const foundSpecial = allItems.filter(i =>
    SPECIAL_ITEMS.some(si => i.name.toLowerCase().includes(si.toLowerCase()))
  );

  if (foundSpecial.length > 0) {
    const specialMsg = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
üö® ùó¶ùóΩùó≤ùó∞ùó∂ùóÆùóπ ùóúùòÅùó≤ùó∫ ùóîùóπùó≤ùóøùòÅ üö®
üïí ${now.toLocaleTimeString("en-PH", { hour12: false })}
üîÑ Next Restock: ${next.toLocaleTimeString("en-PH", { hour12: false })}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
${foundSpecial.map(i => `‚Ä¢ ‚ú® ${toBoldUnicode(i.name)} (${i.quantity})`).join("\n")}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
    `.trim();
    api.sendMessage(specialMsg, threadID);
  }
} 
// Start auto-stock for a GC
async function startAutoStock(threadID, api) {
  if (autoStockTimers[threadID]) return;

  const now = new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Manila" }));
  const next = getNext5Min(now);
  const delay = next.getTime() - now.getTime();

  setTimeout(() => {
    sendStock(threadID, api);
    autoStockTimers[threadID] = setInterval(() => sendStock(threadID, api), 5 * 60 * 1000);
  }, delay);
}

// Command handler
module.exports.run = async function({ api, event, args }) {
  const { threadID, messageID } = event;
  const option = args[0]?.toLowerCase();
  let gcData = (await getData(`stock/${threadID}`)) || { enabled: false };

  if (option === "on") {
    if (gcData.enabled) return api.sendMessage("‚ö†Ô∏è Auto-stock already enabled.", threadID, messageID);

    gcData.enabled = true;
    await setData(`stock/${threadID}`, gcData);
    startAutoStock(threadID, api);
    return api.sendMessage("‚úÖ Auto-stock enabled. Updates every 5 minutes aligned to next restock.", threadID, messageID);
  }

  if (option === "off") {
    gcData.enabled = false;
    await setData(`stock/${threadID}`, gcData);
    if (autoStockTimers[threadID]) {
      clearInterval(autoStockTimers[threadID]);
      delete autoStockTimers[threadID];
    }
    return api.sendMessage("‚ùå Auto-stock disabled.", threadID, messageID);
  }

  if (option === "check") {
    const status = gcData.enabled ? "ON ‚úÖ" : "OFF ‚ùå";
    return api.sendMessage(`üìä Auto-stock status: ${status}`, threadID, messageID);
  }

  api.sendMessage("‚ö†Ô∏è Usage: /stock on|off|check", threadID, messageID);
};

// Auto-resume all enabled GCs on bot restart
module.exports.onLoad = async function({ api }) {
  const allGCs = (await getData("stock")) || {};
  for (const tid in allGCs) {
    if (allGCs[tid].enabled) {
      startAutoStock(tid, api);
      api.sendMessage("‚ôªÔ∏è Bot restarted ‚Äî Auto-stock resumed.", tid);
    }
  }
};
